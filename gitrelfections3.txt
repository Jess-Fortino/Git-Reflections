1.) When would you want to create a remote repository rather
than keeping all your work local?

When you are working on more than one computer, or when you are working with a collaborator.
Plus there is always that frightening moment if you're computer freezes or crashes and you lose
everything you were just working on.

2.) Why might you always want to pull changes manually rather
than having Git automatically stay up-to-date with your
remote repository?

Because you may have made changes to either repository,
local or on github that you don't want transferred yet.
Manually updating ensures that you have everything you want
in either version of the repository.

3.) Describe the differences between forks, clones and branches.
When would you use one instead of the other?

Forks and clones are very similar-- one just happens to be
solely based on the platform- Github-fork. Whenever you clone
or fork, this will have you create an entirely new file as
opposed to a branch- with branches, you are working on
the main file as opposed to a whole new one. You would use
branches if you are working on something you know will be integrated
or that you think you'd like to do. You clone or fork, when you
either want to use an idea from that file, or when you want to
pull an idea from it.

4.) What is the benefit of having a copy of the last known state
of the remote stored locally?

So you know what the most recent changes have been, especially
if you're working collaboratively.

5.) How would you collaborate without using Git or Github?
Would it be easier, and what would be harder?

To collaborate without Git or Github you would have to save
the same file and send it back and forth between the collaborators.
This would be pretty difficult because you couldn't work on
the same file at the same time. It would definitely take longer
and you wouldn't know what changes were made to what file
and when without a detailed description of the changes. Which can
be achieved much easier just be viewing commits.

6.) When would you want to make changes in a separate branch
rather than directly in master? What benefits does each
approach have?

When there needs to be some kind of collaboration about the
change, when you're not quite ready to change anything without
getting feedback. This will help any collaborative effort.
