Git questions, lesson 2
1.)What happens when you initialize a repository? Why do you need to do it?

Initializing a repository makes a .git file appear in the file, it helps
to keep track of every change that is made in the file.

2.)How is the staging area different from the working directory
and the repository? What value do you think it offers?

The staging area is a midway point between an actual commit and
before logical changes are made. The value of the staging area
I believe is the opportunity to have fewer mistakes, this state
allows you to focus on the changes you've made and stop them
from happening.

3.) How can you use the staging area to make sure you have one
commit per logical change?

Simply by using git diff (which allows you to look at the
differences between the working directory and the staging area)
and git diff --staged (which allows you to look at the
differences between the staging area and the most recent commit)
will allow you to make sure that what you are commiting is in fact
a logical change.

4.) What are some situations when branches would be helpful in
keeping your history organized? How would branches help?

Branches would be helpful if you're thinking of experimenting
with a new feature or a new spin on your webpage. Branches
could keep your work organized and separated by allowing you to
work on the same project in different ways without ruining
the original file/project.

5.) How do the diagrams help you visualize the branch structure?

Writing everything out is definitely helpful in the sense
that it lets you look at the bigger picture. You could end up
with a dozen different branches, this could get complicated.
Drawing it out will help you keep track of what you have added
to each branch, when to merge the branches ect.

6.) What is the result of merging two branches toegher? Why
do we represent it in the diagram the way we do?

The result of merging two branches together is permenately
adding features that were previously branched away from the master
branch. This effectively deletes the label from one branch
and keeps the commits in the master branch so you don't lose
detailed information about updates to the file(s). We
represent it in the diagram so that we can fully understand
the process Git goes through when it merges the two branches.
It also helps you keep an eye on when to merge and why now is
the best time to merge.
